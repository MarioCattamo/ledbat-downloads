#!/usr/bin/python3

# Plots rtt as seen by a single rledbat instance 
# Uses data from the traces at /var/log/kern.log generated by the rLEDBAT kernel modules
# Example of use
# # generate rtt file
# echo 'time,rtt,rtt_min' > C1.rtt_csv
# #  parse traces from /var/log/kern.log for the current system
# ./echo_rtt.sh >> C1.rtt_csv
# # plot rtt data
# ./plot_rtt_csv.py C1.rtt_csv

from argparse import ArgumentParser
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
#import sys


#plt.xlim(55000,37000)
#plt.ylim(0,0.5)
#plt.plot(df[sys.argv[2]])
#plt.axhline(y=1460, color='r', linestyle='-')
#plt.scatter(df['time'], df[sys.argv[2]],s=0.01)
#plt.show()


#plt.axhline(y=10000, color='r', linestyle='-')

#plt.ylim(50,480)


if __name__ == "__main__":
    parser = ArgumentParser()
    parser.add_argument("file_name", help="rtt csv filename - admits either ending in '.rtt_csv' or not")
    parser.add_argument("--to_pdf", help='writes to a pdf with the same filename as the pcap file', action='store_true')
    parser.add_argument("--width", help="figure's width for matplotlib", default=-1.0, type=float)
    parser.add_argument("--height", help="figure's height for matplotlib", default=-1.0, type=float)
    parser.add_argument("--outliers", help="Removes outliers exceeding a number of milliseconds", default=2000.0, type=float)


    args= parser.parse_args()
    if args.file_name.endswith('.pcap'):
        print('Not able to process pcap files')
        exit(1)

    # 'dst_port,time,rtt'
    rledbat_capture = pd.read_csv(args.file_name)

    # transform into ms
    rledbat_capture['rtt'] = rledbat_capture['rtt'] * 1000.0

    # remove remove_outliers
    rledbat_capture = rledbat_capture[rledbat_capture['rtt'] < args.outliers]
    if len(rledbat_capture) == 0:
        print('No values after removing outliers')
        exit(1)

    first_timestamp = rledbat_capture['time'][0]
    last_timestamp = rledbat_capture.tail(1)['time']

    width = args.width
    height = args.height
    if width < 0.0:
        width = 6.0 * (float(last_timestamp)-float(first_timestamp))/100.0
        width = min(6.0, width)
    if height < 0.0:
        height = 4.0

    plt.figure(figsize=(width, height))
    plt.scatter(rledbat_capture['time'], rledbat_capture['rtt'],s=1, marker='.')

    plt.ylim(ymin=0.0)


    # plt.tight_layout()

    plt.xlabel('Time (seconds)')
    plt.ylabel('Measured RTT (milliseconds)')
    # # to ensure labels are shown

    if args.to_pdf:
        # removes .pcap from filename, add .pdf
        pdf_filename = args.file_name + '.pdf'
        plt.savefig(pdf_filename, format='pdf')
        print('Saved to file {}'.format(pdf_filename))
    else:
        plt.show()

